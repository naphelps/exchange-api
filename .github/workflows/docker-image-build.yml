name: Build Container Images

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      registry-dockerhub-enabled:
        type: boolean
        description: "Enable container registry DockerHub?"
        default: true
      registry-ghcr-enabled:
        type: boolean
        description: "Enable container registry GitHub Container Registry (GHCR)?"
        default:
      registry-quay-enabled:
        type: boolean
        description: "Enable container registry Quay?"
        default: true
      tag-latest-enabled:
        type: boolean
        description: "Enable latest tag on current build?"
        default: false
      tag-test-enabled:
        type: boolean
        description: "Enable test tag on current build?"
        default: true
  push:
    branches:
      - master
      - v2.124
      - v2.122
      - v2.110
      - v2.87

env:
  IMAGE_REPO: ${{ vars.DOCKERHUB_REPO }}
  GITHUB_CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  GH_BRANCH: ${{ github.ref_name }}
  RUN_NUMBER: ${{ github.run_number }}
  RUN_NUMBER_OFFSET: ${{ vars.RUN_NUMBER_OFFSET }}

jobs:
  something:
    runs-on: ubuntu-latest

    steps:
      # Cache the entire project directory, Corsair dependency cache, and deliverables.
      - name: Cache Project Directories and Files
        id: cache-project
        uses: actions/cache@v4
        with:
          path: |
            ~/work/*
            !~/work/exchange-api/exchange-api/.github
            !~/work/exchange-api/exchange-api/target
          key: checkout-and-compile-project-${{ github.sha }}

      - name: Cache GitHub Workflows
        id: cache-workflow
        uses: actions/cache@v4
        with:
          path: |
            ~/work/exchange-api/exchange-api/.git
            ~/work/exchange-api/exchange-api/.github
            ~/work/exchange-api/exchange-api/src/main/resources/version.txt
          key: checkout-and-compile-workflow-${{ github.sha }}

      # On cache hit, nothing will need to be downloaded.
      # By not downloading and overwriting our project directories anf files, SBT will need to not rebuild.
      # Based on directory and file system change timestamps.
      - name: Checkout Github Repository
        #if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          clean: false

      - name: Cache Dependency Directories and Files
        id: cache-dependency
        uses: actions/cache@v4
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
            ~/.cache/coursier/cache
          key: checkout-and-compile-dependency-${{ hashFiles('**/build.sbt') }}
          restore-keys: checkout-and-compile-dependency-

      - name: Setup Scala
        uses: coursier/setup-action@v1
        with:
          apps: sbt
          jvm: temurin:1.21

      - name: Cache Build Deliverables
        id: cache-deliverable
        uses: actions/cache@v4
        with:
          path: ~/work/exchange-api/exchange-api/target
          key: checkout-and-compile-deliverable-${{ github.sha }}

      # On cache hit, project has already been compiled, packaged, and staged. Nothing to do.
      - name: Compile, Package, and Stage Dockerfile
        run: |
          sbt Docker/stage

      #- name: ls ~/
      #  continue-on-error: true
      #  run: |
      #    ls -ahl ~

      #- name: ls
      #  continue-on-error: true
      #  run: |
      #    pwd
      #    ls -ahl

      #- name: ls ./target
      #  continue-on-error: true
      #  run: ls -ah ./target

      #- name: ls ./target/scala-2.13
      #  continue-on-error: true
      #  run: ls -ah ./target/scala-2.13

      #- name: ls /home/runner
      #  continue-on-error: true
      #  run: ls -ah /home/runner

      #- name: ls /home/runner/.cache
      #  continue-on-error: true
      #  run: ls -ah /home/runner/.cache

      #- name: Upload Artifacts
      #  uses: actions/upload-artifact@v4
      #  with:
      #    include-hidden-files: true
      #    name: exchange-api-${{ github.sha }}
      #    path: |
      #      ./**/*


  something2:
    env:
      RED_HAT_VERSION:      ${{ vars.RED_HAT_VERSION || '10' }}
      RED_HAT_UBI_TYPE:     ${{ vars.RED_HAT_UBI_TYPE  || 'minimal' }}
      BASE_IMAGE_NAME:      ${{ vars.BASE_IMAGE_NAME || format('ubi{0}-{1}', (vars.RED_HAT_VERSION || '10'), (vars.RED_HAT_UBI_TYPE || 'minimal')) }}
      BASE_IMAGE_TAG:       ${{ vars.BASE_IMAGE_TAG || 'latest' }}
      BASE_IMAGE_REGISTERY: ${{ vars.BASE_IMAGE_REGISTERY || 'registry.access.redhat.com' }}
      BASE_IMAGE_FROM:      ${{ vars.BASE_IMAGE_FROM || format('{0}/{1}:{2}', (vars.BASE_IMAGE_REGISTERY || 'registry.access.redhat.com' ), (vars.BASE_IMAGE_NAME || format('ubi{0}-{1}', (vars.RED_HAT_VERSION || '10'), (vars.RED_HAT_UBI_TYPE || 'minimal'))), (vars.BASE_IMAGE_TAG || 'latest')) }}
      IMAGE_AUTHORS:        ${{ vars.IMAGE_AUTHORS || 'Open Horizon <open-horizon@lists.lfedge.org>' }}
      IMAGE_DESCRIPTION:    ${{ vars.IMAGE_DESCRIPTION || 'Open Horizon''s Exchange Server and REST API' }}
      IMAGE_DOCUMENTATION:  ${{ vars.IMAGE_DOCUMENTATION || 'https://open-horizon.github.io/' }}
      IMAGE_LICENSES:       ${{ vars.IMAGE_LICENSES || 'Apache-2.0' }}
      IMAGE_SOURCE:         ${{ vars.IMAGE_SOURCE || github.repositoryUrl }}
      IMAGE_TITLE:          ${{ vars.IMAGE_TITLE || 'Exchange' }}
      IMAGE_VENDOR:         ${{ vars.IMAGE_VENDOR || 'Open Horizon' }}

    runs-on: ubuntu-latest
    needs: [something]
    steps:
      - name: Restore Checkout & Compile Deliverables
        id: cache-deliverable-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/work/exchange-api/exchange-api/target
          key: checkout-and-compile-deliverable-${{ github.sha }}
          fail-on-cache-miss: true

      - name: Restore Checkout & Compile Workflows
        id: cache-workflow-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/work/exchange-api/exchange-api/.git
            ~/work/exchange-api/exchange-api/.github
            ~/work/exchange-api/exchange-api/src/main/resources/version.txt
          key: checkout-and-compile-workflow-${{ github.sha }}

      - name: Checkout Github Repository
        if: steps.cache-workflow-restore.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          clean: false

      #- uses: ./.github/workflows/gh-workflow.yml

      # BUILD_NUMBER=$(($RUN_NUMBER + $RUN_NUMBER_OFFSET))
      # echo "GIT_SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      - name: Exchange Version
        id: exchange-version
        continue-on-error: true
        run: echo "version=$(head -n 1 target/scala-*/classes/version.txt)" >> $GITHUB_OUTPUT

      #- name: Setup Scala
      #  uses: coursier/setup-action@v1
      #  with:
      #    apps: sbt
      #    jvm: temurin:1.21

      # QEMU for software emulation of multiple platforms
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      # Docker buildx/buildkit for multi-platform builds
      #  "linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/loong64,linux/arm/v7,linux/arm/v6"
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          platforms: |
            linux/amd64
            linux/arm64
            linux/ppc64le
            linux/s390x

      # Authenticate GHCR to allow pushing to our alternate image registry
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Image Creation Timestamp
        id: image-creation
        continue-on-error: true
        run: echo "creation=$(date --rfc-3339=ns)" >> $GITHUB_OUTPUT

      - name: Base Image Digest
        id: base-img-digest
        continue-on-error: true
        run: echo "digest=$(docker buildx imagetools inspect registry.access.redhat.com/ubi10-minimal:latest --format '{{ json . }}' | jq -r .manifest.digest)" >> $GITHUB_OUTPUT

      - name: Docker Metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
          DEFAULT_ANNOTATIONS: |
            org.opencontainers.image.authors=${{ env.IMAGE_AUTHORS }}
            org.opencontainers.image.base.digest=${{ steps.base-img-digest.outputs.digest }}
            org.opencontainers.image.base.name=${{ env.BASE_IMAGE_FROM }}
            org.opencontainers.image.created=${{ steps.image-creation.outputs.creation }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.documentation=${{ env.IMAGE_DOCUMENTATION }}
            org.opencontainers.image.licenses=${{ env.IMAGE_LICENSES }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ env.IMAGE_SOURCE }}
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.vendor=${{ env.IMAGE_VENDOR }}
            org.opencontainers.image.version=${{ steps.exchange-version.outputs.version }}
        with:
          annotations: |
            ${{ vars.ANNOTATIONS || env.DEFAULT_ANNOTATIONS }}

      - name: Build & Push Docker image
        env:
          TAG_LATEST_ENABLE: ${{ github.event_name == 'push' && 'false' || inputs.tag-latest-enabled}}
          TAG_TESTING_ENABLE: ${{ github.event_name == 'push' && 'true' || inputs.tag-test-enabled}}
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ steps.docker-metadata.outputs.annotations }}
          attests: type=sbom,generator=image
          build-args: |
            BASE_IMAGE_DIGEST=${{ steps.base-img-digest.outputs.digest }}
            IMAGE_CREATION_TIMESTAMP=${{ steps.image-creation.outputs.creation }}
            IMAGE_REVISION=${{ github.sha }}
            IMAGE_VERSION=${{ steps.exchange-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: target/docker/stage
          file: target/docker/stage/Dockerfile
          #org.opencontainers.image.authors=
          #org.opencontainers.image.ref.name=
          #org.opencontainers.image.url=
          # labels: ${{ steps.docker-metadata.outputs.labels }}
          platforms: |
            linux/amd64
            linux/arm64
            linux/ppc64le
            linux/s390x
          provenance: mode=max
          push: true
          sbom: true
          tags: |
            ${{ env.TAG_TESTING_ENABLE == true && 'ghcr.io/naphelps/exchange-ubi:testing' || '' }}
            ${{ env.TAG_TESTING_ENABLE != true && ghcr.io/naphelps/exchange-ubi:${{ steps.exchange-version.outputs.version }}-testing || '' }}
