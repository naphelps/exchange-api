name: Build Container Images

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      build-targets:
        type: choice
        description: "Dockerfile target to build image"
        default: [exchange-alpine,exchange-ubi]
        options:
          - "[exchange-alpine,exchange-ubi]"
          - "[exchange-alpine]"
          - "[exchange-ubi]"
      registry-dockerhub-enabled:
        type: boolean
        description: "Enable container registry DockerHub?"
        default: true
      registry-ghcr-enabled:
        type: boolean
        description: "Enable container registry GitHub Container Registry (GHCR)?"
        default: true
      registry-quay-enabled:
        type: boolean
        description: "Enable container registry Quay?"
        default: true
      tag-latest-enabled:
        type: boolean
        description: "Enable latest tag on current build?"
        default: false
      tag-test-enabled:
        type: boolean
        description: "Enable test tag on current build?"
        default: true
  push:
    branches:
      - master
      - v2.124
      - v2.122
      - v2.110
      - v2.87

env:
  IMAGE_REPO: ${{ vars.DOCKERHUB_REPO }}
  GITHUB_CONTAINER_REGISTRY: ghcr.io/${{ github.repository_owner }}
  GH_BRANCH: ${{ github.ref_name }}
  RUN_NUMBER: ${{ github.run_number }}
  RUN_NUMBER_OFFSET: ${{ vars.RUN_NUMBER_OFFSET }}
# ${{ format('{0}/exchange-api/.github/workflows/gh-workflow.yml@{1}' github.repository_owner, github.ref_name) }}
jobs:
  checkout-and-compile:
    uses: 'naphelps/exchange-api/.github/workflows/gh-workflow.yml@test'

  something2:
    needs: checkout-and-compile
    env:
      RED_HAT_VERSION:      ${{ vars.RED_HAT_VERSION || '10' }}
      RED_HAT_UBI_TYPE:     ${{ vars.RED_HAT_UBI_TYPE  || 'minimal' }}
      BASE_IMAGE_NAME:      ${{ vars.BASE_IMAGE_NAME || format('ubi{0}-{1}', (vars.RED_HAT_VERSION || '10'), (vars.RED_HAT_UBI_TYPE || 'minimal')) }}
      BASE_IMAGE_TAG:       ${{ vars.BASE_IMAGE_TAG || 'latest' }}
      BASE_IMAGE_REGISTERY: ${{ vars.BASE_IMAGE_REGISTERY || 'registry.access.redhat.com' }}
      BASE_IMAGE_FROM:      ${{ vars.BASE_IMAGE_FROM || format('{0}/{1}:{2}', (vars.BASE_IMAGE_REGISTERY || 'registry.access.redhat.com' ), (vars.BASE_IMAGE_NAME || format('ubi{0}-{1}', (vars.RED_HAT_VERSION || '10'), (vars.RED_HAT_UBI_TYPE || 'minimal'))), (vars.BASE_IMAGE_TAG || 'latest')) }}
      IMAGE_AUTHORS:        ${{ vars.IMAGE_AUTHORS || 'Open Horizon <open-horizon@lists.lfedge.org>' }}
      IMAGE_DESCRIPTION:    ${{ vars.IMAGE_DESCRIPTION || 'Open Horizon''s Exchange Server and REST API' }}
      IMAGE_DOCUMENTATION:  ${{ vars.IMAGE_DOCUMENTATION || 'https://open-horizon.github.io/' }}
      IMAGE_LICENSES:       ${{ vars.IMAGE_LICENSES || 'Apache-2.0' }}
      IMAGE_PLATFORMS:      ${{ vars.IMAGE_PLATFORMS || 'linux/amd64,linux/arm64,linux/ppc64le,linux/s390x' }}
      IMAGE_SOURCE:         ${{ vars.IMAGE_SOURCE || github.repositoryUrl }}
      IMAGE_TITLE:          ${{ vars.IMAGE_TITLE || 'Exchange' }}
      IMAGE_VENDOR:         ${{ vars.IMAGE_VENDOR || 'Open Horizon' }}
    runs-on: ubuntu-latest
    # ${{ github.event_name == 'push' && (vars.BUILD_TARGETS || ('[exchange-alpine,exchange-ubi]')) || inputs.build-targets }}
    strategy:
      matrix:
        build-targets: ${{ inputs.build-targets }}
    steps:
      - id: cache-workflow-restore
        name: Restore Checkout & Compile Workflows
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/work/exchange-api/exchange-api/.git
            ~/work/exchange-api/exchange-api/.github
            ~/work/exchange-api/exchange-api/src/main/resources/version.txt
          key: checkout-and-compile-workflow-${{ github.sha }}

      - id: checkout
        if: steps.cache-workflow-restore.outputs.cache-hit != 'true'
        name: Checkout Github Repository
        uses: actions/checkout@v3
        with:
          clean: false

      - name: Restore Checkout & Compile Deliverables
        id: cache-deliverable-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/work/exchange-api/exchange-api/target
          key: checkout-and-compile-deliverable-${{ github.sha }}
          fail-on-cache-miss: true

      # BUILD_NUMBER=$(($RUN_NUMBER + $RUN_NUMBER_OFFSET))
      # echo "GIT_SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      - continue-on-error: true
        id: exchange-version
        name: Exchange Version
        run: |
          echo "version=$(head -n 1 target/scala-*/classes/version.txt)" >> $GITHUB_OUTPUT
          echo "version-major=$(grep -Eo '^[[:digit:]]+' target/scala-*/classes/version.txt)" >> $GITHUB_OUTPUT
          echo "version-less-patch=$(grep -Eo '^[[:digit:]]+\.[[:digit:]]+' target/scala-*/classes/version.txt)" >> $GITHUB_OUTPUT

      #- name: Setup Scala
      #  uses: coursier/setup-action@v1
      #  with:
      #    apps: sbt
      #    jvm: temurin:1.21

      # QEMU for software emulation of multiple platforms
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      # Docker buildx/buildkit for multi-platform builds
      #  "linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/loong64,linux/arm/v7,linux/arm/v6"
      - name: Setup Docker Buildx
        with:
          install: true
          platforms: ${{ env.IMAGE_PLATFORMS }}
        uses: docker/setup-buildx-action@v3

      # Authenticate GHCR to allow pushing to our alternate image registry
      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - continue-on-error: true
        id: image-creation
        name: Image Creation Timestamp
        run: |
          echo "creation-iso8601=$(date --iso-8601=ns)" >> $GITHUB_OUTPUT
          echo "creation-rfc3339=$(date --rfc-3339=ns)" >> $GITHUB_OUTPUT
          echo "creation-prerelease-tag=$(date +%Y%m%d-%T.%9N.%Z | sed -E 's|:|.|g')" >> $GITHUB_OUTPUT

      - continue-on-error: true
        id: base-img-digest
        name: Base Image Digest
        run: echo "digest=$(docker buildx imagetools inspect registry.access.redhat.com/ubi10-minimal:latest --format '{{ json . }}' | jq -r .manifest.digest)" >> $GITHUB_OUTPUT

      - env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
          DEFAULT_ANNOTATIONS: |
            org.opencontainers.image.authors=${{ env.IMAGE_AUTHORS }}
            org.opencontainers.image.base.digest=${{ steps.base-img-digest.outputs.digest }}
            org.opencontainers.image.base.name=${{ env.BASE_IMAGE_FROM }}
            org.opencontainers.image.created=${{ steps.image-creation.outputs.creation-rfc3339 }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.documentation=${{ env.IMAGE_DOCUMENTATION }}
            org.opencontainers.image.licenses=${{ env.IMAGE_LICENSES }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ env.IMAGE_SOURCE }}
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.vendor=${{ env.IMAGE_VENDOR }}
            org.opencontainers.image.version=${{ steps.exchange-version.outputs.version }}
        id: docker-metadata
        name: Docker Metadata
        uses: docker/metadata-action@v5
        with:
          annotations: |
            ${{ vars.ANNOTATIONS || env.DEFAULT_ANNOTATIONS }}

      - env:
          BUILD_TARGET: ${{ github.event_name == 'push' && (vars.BUILD_TARGET || 'exchange-ubi') || inputs.build-target }}
          DOMAIN_DOCKERHUB: docker.io
          DOMAIN_GHCR: ghcr.io
          DOMAIN_QUAY: quay.io
          IMAGE_NAME: ${{ vars.IMAGE_NAME || 'exchange-ubi' }}
          REGISTRY_DOCKERHUB_ENABLE: ${{ github.event_name == 'push' && 'true' || inputs.registry-dockerhub-enabled }}
          REGISTRY_GHCR_ENABLE: ${{ github.event_name == 'push' && 'true' || inputs.registry-ghcr-enabled }}
          REGISTRY_QUAY_ENABLE: ${{ github.event_name == 'push' && 'true' || inputs.registry-quay-enabled }}
          TAG_LATEST_ENABLE: ${{ github.event_name == 'push' && 'false' || inputs.tag-latest-enabled }}
          TAG_SYNTAX: '{0}/{1}/{2}:{3}{4}'
          TAG_TEST_SUFFIX: ${{ (github.event_name == 'push' && 'true' || inputs.tag-test-enabled) && format('-testing-{0}', steps.image-creation.outputs.creation-prerelease-tag) || '' }}
          TAG_TESTING_ENABLE: ${{ github.event_name == 'push' && 'true' || inputs.tag-test-enabled }}
        name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ steps.docker-metadata.outputs.annotations }}
          attests: type=sbom,generator=image
          build-args: |
            BASE_IMAGE_DIGEST=${{ steps.base-img-digest.outputs.digest }}
            IMAGE_CREATION_TIMESTAMP=${{ steps.image-creation.outputs.creation }}
            IMAGE_REVISION=${{ github.sha }}
            IMAGE_VERSION=${{ steps.exchange-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: target/docker/stage
          file: target/docker/stage/Dockerfile
          #org.opencontainers.image.authors=
          #org.opencontainers.image.ref.name=
          #org.opencontainers.image.url=
          # labels: ${{ steps.docker-metadata.outputs.labels }}
          platforms: ${{ env.IMAGE_PLATFORMS }}
          provenance: mode=max
          push: true
          sbom: true
          tags: |
            ${{ env.REGISTRY_DOCKERHUB_ENABLE != 'true' && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version-major, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_DOCKERHUB_ENABLE != 'true' && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version-less-patch, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_DOCKERHUB_ENABLE != 'true' && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version, env.TAG_TEST_SUFFIX) || '' }}
            ${{ (env.REGISTRY_DOCKERHUB_ENABLE != 'true' && env.TAG_LATEST_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, github.repository_owner, env.IMAGE_NAME, 'latest', '') || '' }}
            ${{ (env.REGISTRY_DOCKERHUB_ENABLE != 'true' && env.TAG_TESTING_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, github.repository_owner, env.IMAGE_NAME, 'testing', '') || '' }}
            ${{ env.REGISTRY_GHCR_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version-major, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_GHCR_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version-less-patch, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_GHCR_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version, env.TAG_TEST_SUFFIX) || '' }}
            ${{ (env.REGISTRY_GHCR_ENABLE == 'true' && env.TAG_LATEST_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, github.repository_owner, env.IMAGE_NAME, 'latest', '') || '' }}
            ${{ (env.REGISTRY_GHCR_ENABLE == 'true' && env.TAG_TESTING_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, github.repository_owner, env.IMAGE_NAME, 'testing', '') || '' }}
            ${{ env.REGISTRY_QUAY_ENABLE != 'true' && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version-major, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_QUAY_ENABLE != 'true' && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version-less-patch, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_QUAY_ENABLE != 'true' && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, github.repository_owner, env.IMAGE_NAME, steps.exchange-version.outputs.version, env.TAG_TEST_SUFFIX) || '' }}
            ${{ (env.REGISTRY_QUAY_ENABLE != 'true' && env.TAG_LATEST_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, github.repository_owner, env.IMAGE_NAME, 'latest', '') || '' }}
            ${{ (env.REGISTRY_QUAY_ENABLE != 'true' && env.TAG_TESTING_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, github.repository_owner, env.IMAGE_NAME, 'testing', '') || '' }}
          target: ${{ matrix.build-targets }}
