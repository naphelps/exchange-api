name: Build Container Images

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      build-targets:
        default: "['exchange-alpine', 'exchange-ubi']"
        description: "Dockerfile target to build image"
        type: choice
        options:
          - "['exchange-alpine', 'exchange-ubi']"
          - "['exchange-alpine']"
          - "['exchange-ubi']"
      image-platforms:
        default: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"
        description: "Platforms to build containers for"
        options:
          - "linux/amd64,linux/arm64,linux/ppc64le,linux/riscv64,linux/s390x"
          - "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x"
        type: choice
      registry-dockerhub-enabled:
        default: true
        description: "Enable container registry DockerHub?"
        type: boolean
      registry-ghcr-enabled:
        default: true
        description: "Enable container registry GitHub Container Registry (GHCR)?"
        type: boolean
      registry-quay-enabled:
        default: true
        description: "Enable container registry Quay?"
        type: boolean
      tag-latest-enabled:
        default: false
        description: "Enable latest tag on current build?"
        type: boolean
      tag-test-enabled:
        default: true
        description: "Enable test tag on current build?"
        type: boolean
  push:
    branches:
      - master
      - v2.144
      - v2.124
      - v2.122
      - v2.110
      - v2.87

jobs:
  cache-restore-check:
    outputs:
      cache-hit: ${{ steps.cache-workflow-restore.outputs.cache-hit }}
    runs-on: ubuntu-latest
    steps:
      - id: cache-workflow-restore
        name: Restore Checkout & Compile Workflows
        uses: actions/cache/restore@v4
        with:
          lookup-only: true
          key: checkout-and-compile-workflow-${{ github.sha }}
          path: |
            ~/work/exchange-api/exchange-api/.git
            ~/work/exchange-api/exchange-api/.github
            ~/work/exchange-api/exchange-api/src/main/resources/version.txt

  # On rebuild skip this job.
  checkout-and-compile:
    uses: './.github/workflows/checkout-and-compile.yml'
    if: ${{ needs.cache-restore-check.outputs.cache-hit != 'true' }}
    needs: cache-restore-check

  # Matrices do not allow templating. As a workaround, we encode our dynamic choices in JSON and then decode it later as a static value.
  set-matrix-build-targets:
    env:
      BUILD_TARGETS: ${{ github.event_name == 'push' && (vars.BUILD_TARGETS || '[\"exchange-alpine\", \"exchange-ubi\"]') || inputs.build-targets }}
    outputs:
      build-targets: ${{ steps.set-values.outputs.build-targets }}
    runs-on: ubuntu-latest
    steps:
      - id: set-values
        run: |
          echo "build-targets=${{ env.BUILD_TARGETS }}" >> $GITHUB_OUTPUT

  # On rebuild, skip checking-out source and compilation, and restore from cache instead.
  build-images:
    if: always()
    needs: [checkout-and-compile, set-matrix-build-targets]
    env:
      RED_HAT_VERSION:                      ${{ vars.RED_HAT_VERSION || '10' }}
      RED_HAT_UBI_TYPE:                     ${{ vars.RED_HAT_UBI_TYPE  || 'minimal' }}
      BASE_IMAGE_NAME_ALPINE:               ${{ vars.BASE_IMAGE_NAME_ALPINE || 'alpine' }}
      BASE_IMAGE_NAME_UBI:                  ${{ vars.BASE_IMAGE_NAME_UBI || format('ubi{0}-{1}', (vars.RED_HAT_VERSION || '10'), (vars.RED_HAT_UBI_TYPE || 'minimal')) }}
      BASE_IMAGE_TAG_ALPINE:                ${{ vars.BASE_IMAGE_TAG_ALPINE || 'latest' }}
      BASE_IMAGE_TAG_UBI:                   ${{ vars.BASE_IMAGE_TAG_UBI || 'latest' }}
      BASE_IMAGE_REGISTERY_ALPINE:          ${{ vars.BASE_IMAGE_REGISTERY_ALPINE || 'docker.io' }}
      BASE_IMAGE_REGISTERY_UBI:             ${{ vars.BASE_IMAGE_REGISTERY_UBI || 'registry.access.redhat.com' }}
      BASE_IMAGE_FROM_ALPINE:               ${{ vars.BASE_IMAGE_FROM_ALPINE || format('{0}/{1}:{2}', (vars.BASE_IMAGE_REGISTERY_ALPINE || 'docker.io' ), (vars.BASE_IMAGE_NAME_ALPINE || 'alpine'), (vars.BASE_IMAGE_TAG_ALPINE || 'latest')) }}
      BASE_IMAGE_FROM_UBI:                  ${{ vars.BASE_IMAGE_FROM_UBI || format('{0}/{1}:{2}', (vars.BASE_IMAGE_REGISTERY_UBI || 'registry.access.redhat.com' ), (vars.BASE_IMAGE_NAME_UBI || format('ubi{0}-{1}', (vars.RED_HAT_VERSION || '10'), (vars.RED_HAT_UBI_TYPE || 'minimal'))), (vars.BASE_IMAGE_TAG_UBI || 'latest')) }}
      IMAGE_AUTHORS:                        ${{ vars.IMAGE_AUTHORS || 'Open Horizon <open-horizon@lists.lfedge.org>' }}
      IMAGE_DESCRIPTION:                    ${{ vars.IMAGE_DESCRIPTION || 'Open Horizon''s Exchange Server and REST API' }}
      IMAGE_DOCUMENTATION:                  ${{ vars.IMAGE_DOCUMENTATION || 'https://open-horizon.github.io/' }}
      IMAGE_LICENSES:                       ${{ vars.IMAGE_LICENSES || 'Apache-2.0' }}
      IMAGE_PLATFORMS:                      ${{ github.event_name == 'push' && (vars.IMAGE_PLATFORMS || 'linux/amd64,linux/arm64,linux/ppc64le,linux/s390x') || inputs.image-platforms }}
      IMAGE_SOURCE:                         ${{ vars.IMAGE_SOURCE || github.repositoryUrl }}
      IMAGE_TITLE:                          ${{ vars.IMAGE_TITLE || 'Exchange' }}
      IMAGE_VENDOR:                         ${{ vars.IMAGE_VENDOR || 'Open Horizon' }}
      REGISTRY_DOCKERHUB_ENABLE:            ${{ github.event_name == 'push' && (vars.REGISTRY_DOCKERHUB_ENABLE || 'true') || inputs.registry-dockerhub-enabled }}
      REGISTRY_DOCKERHUB_ORGANIZATION_NAME: ${{ vars.REGISTRY_DOCKERHUB_ORGANIZATION_NAME || github.repository_owner }}
      REGISTRY_GHCR_ENABLE:                 ${{ github.event_name == 'push' && (vars.REGISTRY_GHCR_ENABLE || 'true') || inputs.registry-ghcr-enabled }}
      REGISTRY_GHCR_ORGANIZATION_NAME:      ${{ VARS.REGISTRY_GHCR_ORGANIZATION_NAME || github.repository_owner }}
      REGISTRY_QUAY_ENABLE:                 ${{ github.event_name == 'push' && (vars.REGISTRY_QUAY_ENABLE || 'true') || inputs.registry-quay-enabled }}
      REGISTRY_QUAY_ORGANIZATION_NAME:      ${{ vars.REGISTRY_QUAY_ORGANIZATION_NAME || github.repository_owner }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Decode JSON into a static value.
        build-targets: ${{ fromJson(needs.set-matrix-build-targets.outputs.build-targets) }}
    steps:
      - id: cache-workflow-restore
        name: Restore Checkout & Compile Workflows
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          key: checkout-and-compile-workflow-${{ github.sha }}
          path: |
            ~/work/exchange-api/exchange-api/.git
            ~/work/exchange-api/exchange-api/.github
            ~/work/exchange-api/exchange-api/src/main/resources/version.txt

      - name: Restore Checkout & Compile Deliverables
        id: cache-deliverable-restore
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          key: checkout-and-compile-deliverable-${{ github.sha }}
          path: ~/work/exchange-api/exchange-api/target

      - continue-on-error: true
        id: exchange-version
        name: Exchange Version
        run: |
          echo "version=$(head -n 1 target/scala-*/classes/version.txt)" >> $GITHUB_OUTPUT
          echo "version-major=$(grep -Eo '^[[:digit:]]+' target/scala-*/classes/version.txt)" >> $GITHUB_OUTPUT
          echo "version-less-patch=$(grep -Eo '^[[:digit:]]+\.[[:digit:]]+' target/scala-*/classes/version.txt)" >> $GITHUB_OUTPUT

      # QEMU for software emulation of multiple platforms
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      # Docker buildx/buildkit for multi-platform builds
      #  "linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/loong64,linux/arm/v7,linux/arm/v6"
      - name: Setup Docker Buildx
        with:
          install: true
          platforms: ${{ matrix.build-targets == 'exchange-ubi' && env.IMAGE_PLATFORMS || format('{0},linux/riscv64', env.IMAGE_PLATFORMS) }}
        uses: docker/setup-buildx-action@v3

      # Authenticate Docker Hub
      - if: ${{ env.REGISTRY_DOCKERHUB_ENABLE == 'true' }}
        name: Login to Docker Hub's Container Registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Authenticate GHCR
      - if: ${{ env.REGISTRY_GHCR_ENABLE == 'true' }}
        name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Authenticate Quay
      - if: ${{ env.REGISTRY_QUAY_ENABLE == 'true' }}
        name: Login to Quay.io's Container Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}

      - continue-on-error: true
        id: image-creation
        name: Image Creation Timestamp
        run: |
          echo "creation-iso8601=$(date --iso-8601=ns)" >> $GITHUB_OUTPUT
          echo "creation-rfc3339=$(date --rfc-3339=ns)" >> $GITHUB_OUTPUT
          echo "creation-prerelease-tag=$(date +%Y%m%d-%T.%9N.%Z | sed -E 's|:|.|g')" >> $GITHUB_OUTPUT

      - continue-on-error: true
        id: base-img-digest
        name: Base Image Digest
        run: |
          echo "digest-alpine=$(docker buildx imagetools inspect ${BASE_IMAGE_FROM_ALPINE} --format '{{ json . }}' | jq -r .manifest.digest)" >> $GITHUB_OUTPUT
          echo "digest-ubi=$(docker buildx imagetools inspect ${BASE_IMAGE_FROM_UBI} --format '{{ json . }}' | jq -r .manifest.digest)" >> $GITHUB_OUTPUT

      - env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
          DEFAULT_ANNOTATIONS: |
            org.opencontainers.image.authors=${{ env.IMAGE_AUTHORS }}
            org.opencontainers.image.base.digest=${{ matrix.build-targets == 'exchange-ubi' && steps.base-img-digest.outputs.digest-ubi || steps.base-img-digest.outputs.digest-alpine }}
            org.opencontainers.image.base.name=${{ matrix.build-targets == 'exchange-ubi' && env.BASE_IMAGE_FROM_UBI || env.BASE_IMAGE_FROM_ALPINE }}
            org.opencontainers.image.created=${{ steps.image-creation.outputs.creation-rfc3339 }}
            org.opencontainers.image.description=${{ env.IMAGE_DESCRIPTION }}
            org.opencontainers.image.documentation=${{ env.IMAGE_DOCUMENTATION }}
            org.opencontainers.image.licenses=${{ env.IMAGE_LICENSES }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ env.IMAGE_SOURCE }}
            org.opencontainers.image.title=${{ env.IMAGE_TITLE }}
            org.opencontainers.image.vendor=${{ env.IMAGE_VENDOR }}
            org.opencontainers.image.version=${{ steps.exchange-version.outputs.version }}
        id: docker-metadata
        name: Docker Metadata
        uses: docker/metadata-action@v5
        with:
          annotations: |
            ${{ vars.ANNOTATIONS || env.DEFAULT_ANNOTATIONS }}

      - env:
          BUILD_TARGET:        ${{ github.event_name == 'push' && (vars.BUILD_TARGET || 'exchange-ubi') || inputs.build-target }}
          DOMAIN_DOCKERHUB:    docker.io
          DOMAIN_GHCR:         ghcr.io
          DOMAIN_QUAY:         quay.io
          IMAGE_NAME:          ${{ vars.IMAGE_NAME || matrix.build-targets }}
          TAG_LATEST_ENABLE:   ${{ github.event_name == 'push' && 'false' || inputs.tag-latest-enabled }}
          TAG_SYNTAX:          '{0}/{1}/{2}:{3}{4}'
          TAG_TEST_SUFFIX:     ${{ (github.event_name == 'push' && 'true' || inputs.tag-test-enabled) && '-testing' || '' }}
          TAG_CREATION_SUFFIX: ${{ format('-{0}', steps.image-creation.outputs.creation-prerelease-tag) }}
          TAG_TESTING_ENABLE:  ${{ github.event_name == 'push' && 'true' || inputs.tag-test-enabled }}
        name: Build & Push Docker image
        uses: docker/build-push-action@v5
        with:
          annotations: ${{ steps.docker-metadata.outputs.annotations }}
          attests: type=sbom,generator=image
          build-args: |
            BASE_IMAGE_DIGEST_ALPINE=${{ steps.base-img-digest.outputs.digest-alpine }}
            BASE_IMAGE_DIGEST_UBI=${{ steps.base-img-digest.outputs.digest-ubi }}
            BASE_IMAGE_FROM_ALPINE=${{ env.BASE_IMAGE_FROM_ALPINE }}
            BASE_IMAGE_FROM_UBI=${{ env.BASE_IMAGE_FROM_UBI }}
            IMAGE_CREATION_TIMESTAMP=${{ steps.image-creation.outputs.creation }}
            IMAGE_REVISION=${{ github.sha }}
            IMAGE_VERSION=${{ steps.exchange-version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: target/docker/stage
          file: target/docker/stage/Dockerfile
          platforms: ${{ matrix.build-targets == 'exchange-ubi' && env.IMAGE_PLATFORMS || format('{0},linux/riscv64', env.IMAGE_PLATFORMS) }}
          provenance: mode=max
          push: true
          sbom: true
          tags: |
            ${{ env.REGISTRY_DOCKERHUB_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, env.REGISTRY_DOCKERHUB_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version-major, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_DOCKERHUB_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, env.REGISTRY_DOCKERHUB_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version-less-patch, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_DOCKERHUB_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, env.REGISTRY_DOCKERHUB_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_DOCKERHUB_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, env.REGISTRY_DOCKERHUB_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version, format('{0}{1}', env.TAG_CREATION_SUFFIX, env.TAG_TEST_SUFFIX)) || '' }}
            ${{ (env.REGISTRY_DOCKERHUB_ENABLE == 'true' && env.TAG_LATEST_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, env.REGISTRY_DOCKERHUB_ORGANIZATION_NAME, matrix.build-targets, 'latest', '') || '' }}
            ${{ (env.REGISTRY_DOCKERHUB_ENABLE == 'true' && env.TAG_TESTING_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_DOCKERHUB, env.REGISTRY_DOCKERHUB_ORGANIZATION_NAME, matrix.build-targets, 'testing', '') || '' }}
            ${{ env.REGISTRY_GHCR_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, env.REGISTRY_GHCR_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version-major, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_GHCR_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, env.REGISTRY_GHCR_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version-less-patch, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_GHCR_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, env.REGISTRY_GHCR_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_GHCR_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, env.REGISTRY_GHCR_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version, format('{0}{1}', env.TAG_CREATION_SUFFIX, env.TAG_TEST_SUFFIX)) || '' }}
            ${{ (env.REGISTRY_GHCR_ENABLE == 'true' && env.TAG_LATEST_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, env.REGISTRY_GHCR_ORGANIZATION_NAME, matrix.build-targets, 'latest', '') || '' }}
            ${{ (env.REGISTRY_GHCR_ENABLE == 'true' && env.TAG_TESTING_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_GHCR, env.REGISTRY_GHCR_ORGANIZATION_NAME, matrix.build-targets, 'testing', '') || '' }}
            ${{ env.REGISTRY_QUAY_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, env.REGISTRY_QUAY_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version-major, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_QUAY_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, env.REGISTRY_QUAY_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version-less-patch, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_QUAY_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, env.REGISTRY_QUAY_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version, env.TAG_TEST_SUFFIX) || '' }}
            ${{ env.REGISTRY_QUAY_ENABLE == 'true' && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, env.REGISTRY_QUAY_ORGANIZATION_NAME, matrix.build-targets, steps.exchange-version.outputs.version, format('{0}{1}', env.TAG_CREATION_SUFFIX, env.TAG_TEST_SUFFIX)) || '' }}
            ${{ (env.REGISTRY_QUAY_ENABLE == 'true' && env.TAG_LATEST_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, env.REGISTRY_QUAY_ORGANIZATION_NAME, matrix.build-targets, 'latest', '') || '' }}
            ${{ (env.REGISTRY_QUAY_ENABLE == 'true' && env.TAG_TESTING_ENABLE == 'true') && format(env.TAG_SYNTAX, env.DOMAIN_QUAY, env.REGISTRY_QUAY_ORGANIZATION_NAME, matrix.build-targets, 'testing', '') || '' }}
          target: ${{ matrix.build-targets }}
